= Vim =

====Install Vim 8====

 git clone https://github.com/vim/vim.git
 
 cd vim
 
 ./configure --with-features=huge --enable-multibyte --enable-rubyinterp --enable-pythoninterp --enable-perlinterp --enable-luainterp
 
 make
 
 sudo make install
 
====Spell check====
 
 # Highlight possible mis-spellings
 leader + o
 
 # Cursor over word
 z + =        #-> Show list of possible replacement words

====Macro operation====

 # start recording macro
 q + <character to record macro on>

 <perform macro>
 
 # escape recording macro
 q
 
 # perform macro
 @ + <character>

====Move cursor line to top of screen====

 zt

====Move cursor line to middle of screen====

 zz

====Move cursor line to bottom of screen====

 zb

====Select current line====

 V

====Surround n words with double quotes====

 # short for surround n words with "
 ys3w"

====Replace sybmols surrounding words====

 # short for change sybmol from " to '
 cs"'

==== Run current file from within vim ====

 :!%

==== fuGITive ====

## Basic commands

 :Git [args]              #-> does what you'd expect

`~/.gitconfig` aliases are available.

 :Git! [args]             #-> same as before, dumping output to a tmp file

## Moving inside a repo.

 :Gcd [dir]               #-> :cd relative to the repository

 :Glcd [dir]              #-> same as above, local to the current window

## Blame

 :Gblame
 `A` resizes to end of author column
 `C` resizes to end of commit column
 `D` resizes to end of date/time column
 `<CR>` quits blame buffer, then opens commit

Working with the index

 :Gwrite                  #-> add
 :Gread                   #-> checkout
 :Gremove                 #-> rm
 :Gmove                   #-> mv

in the `Gmove` context, `/` represents the root of the git repository.

 :Gstatus                 # brace yourselves
 <CR>  |:Gedit|
 <C-n> and  <C-p> for moving around files
 a     |:Git| add        # both work in Visual mode too
 -     |:Git| reset (staged files)
 cc    |:Gcommit|
 D     |:Gdiff|
 ds    |:Gsdiff|
 dp    |:Git!| diff (p for patch; use :Gw to apply)
 dp    |:Git| add --intent-to-add (untracked files)
 dv    |:Gvdiff|
 o     |:Gsplit|
 p     |:Git| add --patch
 q     close status
 R     reload status

## Diffs

 diffget [bufspec]        #-> `do` can be used instead (*d*iff *o*btain)
 diffput [bufspec]
 diffupdate

`[c` and `]c` for navigating changes.

 diffget //1 | diffupdate # `|` is used to chain operations

## Solving merge conflicts with 2-way diffs

 :Gdiff                   #-> on the file with the conflict

## Browsing the git object database

 `:Gedit`

**Can be used to open a _read-only_ buffer with the contents of any git object**

## Blobs

 :Gedit branchname:path/to/file
 :Gedit feature:%

## Trees, commits and tags can be browsed too

 :Gedit SHA               #-> will open a buffer with the git object referenced by `SHA`

## History

### Revisions of a file

 :Glog [args]             #-> opens a buffer with the revisions of the current file

### Move between revisions

 `:cnext`, `:cprevious`, `:cfirst` and `:clast` can be used to

 :Glog -10                #-> opens only the last 10 revisions

### Commits

 :Glog --                 # load all commits into the quickfix list
 :Glog -- %               # load all commits that affected the current file into the quickfix list

## Searching

### Working copy files

 :Ggrep 'whatever'

###  Index

 :Ggrep --cached 'whatever'

##  Branches

 :Ggrep whatever branch   # search for `whatever` in `branch`

## Tags

 :Ggrep whatever tagname  # search for `whatever` in tag `tagname`

## Commit messages

 :Glog --grep=whatever -- # search for `whatever` in all commit messages
 :Glog --grep=w00t -- %   # search for `w00t` in all commit messages that touched the current file

## Added or removed words

 :Glog -Swhatever --      # search for `whatever` in the diff for each commit
 :Glog -Swhatever --  %   # search for `whatever` in the diff for each commit that touched the current file

## Status line

 set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

